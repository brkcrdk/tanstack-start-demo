/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignUpRouteImport } from './routes/sign-up'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as ProfileRouteRouteImport } from './routes/profile/route'
import { Route as RootRouteRouteImport } from './routes/_root/route'
import { Route as ProfileIndexRouteImport } from './routes/profile/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as RootIndexRouteImport } from './routes/_root/index'
import { Route as RootVideosIndexRouteImport } from './routes/_root/videos/index'
import { Route as RootInfiniteVideosIndexRouteImport } from './routes/_root/infinite-videos/index'

const SignUpRoute = SignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRouteRoute = ProfileRouteRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const RootRouteRoute = RootRouteRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIndexRoute = ProfileIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProfileRouteRoute,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const RootIndexRoute = RootIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootRouteRoute,
} as any)
const RootVideosIndexRoute = RootVideosIndexRouteImport.update({
  id: '/videos/',
  path: '/videos/',
  getParentRoute: () => RootRouteRoute,
} as any)
const RootInfiniteVideosIndexRoute = RootInfiniteVideosIndexRouteImport.update({
  id: '/infinite-videos/',
  path: '/infinite-videos/',
  getParentRoute: () => RootRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/profile': typeof ProfileRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/sign-up': typeof SignUpRoute
  '/': typeof RootIndexRoute
  '/login': typeof LoginIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/infinite-videos': typeof RootInfiniteVideosIndexRoute
  '/videos': typeof RootVideosIndexRoute
}
export interface FileRoutesByTo {
  '/logout': typeof LogoutRoute
  '/sign-up': typeof SignUpRoute
  '/': typeof RootIndexRoute
  '/login': typeof LoginIndexRoute
  '/profile': typeof ProfileIndexRoute
  '/infinite-videos': typeof RootInfiniteVideosIndexRoute
  '/videos': typeof RootVideosIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_root': typeof RootRouteRouteWithChildren
  '/profile': typeof ProfileRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/sign-up': typeof SignUpRoute
  '/_root/': typeof RootIndexRoute
  '/login/': typeof LoginIndexRoute
  '/profile/': typeof ProfileIndexRoute
  '/_root/infinite-videos/': typeof RootInfiniteVideosIndexRoute
  '/_root/videos/': typeof RootVideosIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/profile'
    | '/logout'
    | '/sign-up'
    | '/'
    | '/login'
    | '/profile/'
    | '/infinite-videos'
    | '/videos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/logout'
    | '/sign-up'
    | '/'
    | '/login'
    | '/profile'
    | '/infinite-videos'
    | '/videos'
  id:
    | '__root__'
    | '/_root'
    | '/profile'
    | '/logout'
    | '/sign-up'
    | '/_root/'
    | '/login/'
    | '/profile/'
    | '/_root/infinite-videos/'
    | '/_root/videos/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  RootRouteRoute: typeof RootRouteRouteWithChildren
  ProfileRouteRoute: typeof ProfileRouteRouteWithChildren
  LogoutRoute: typeof LogoutRoute
  SignUpRoute: typeof SignUpRoute
  LoginIndexRoute: typeof LoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/sign-up': {
      id: '/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof SignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/': {
      id: '/profile/'
      path: '/'
      fullPath: '/profile/'
      preLoaderRoute: typeof ProfileIndexRouteImport
      parentRoute: typeof ProfileRouteRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_root/': {
      id: '/_root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RootIndexRouteImport
      parentRoute: typeof RootRouteRoute
    }
    '/_root/videos/': {
      id: '/_root/videos/'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof RootVideosIndexRouteImport
      parentRoute: typeof RootRouteRoute
    }
    '/_root/infinite-videos/': {
      id: '/_root/infinite-videos/'
      path: '/infinite-videos'
      fullPath: '/infinite-videos'
      preLoaderRoute: typeof RootInfiniteVideosIndexRouteImport
      parentRoute: typeof RootRouteRoute
    }
  }
}

interface RootRouteRouteChildren {
  RootIndexRoute: typeof RootIndexRoute
  RootInfiniteVideosIndexRoute: typeof RootInfiniteVideosIndexRoute
  RootVideosIndexRoute: typeof RootVideosIndexRoute
}

const RootRouteRouteChildren: RootRouteRouteChildren = {
  RootIndexRoute: RootIndexRoute,
  RootInfiniteVideosIndexRoute: RootInfiniteVideosIndexRoute,
  RootVideosIndexRoute: RootVideosIndexRoute,
}

const RootRouteRouteWithChildren = RootRouteRoute._addFileChildren(
  RootRouteRouteChildren,
)

interface ProfileRouteRouteChildren {
  ProfileIndexRoute: typeof ProfileIndexRoute
}

const ProfileRouteRouteChildren: ProfileRouteRouteChildren = {
  ProfileIndexRoute: ProfileIndexRoute,
}

const ProfileRouteRouteWithChildren = ProfileRouteRoute._addFileChildren(
  ProfileRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  RootRouteRoute: RootRouteRouteWithChildren,
  ProfileRouteRoute: ProfileRouteRouteWithChildren,
  LogoutRoute: LogoutRoute,
  SignUpRoute: SignUpRoute,
  LoginIndexRoute: LoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
