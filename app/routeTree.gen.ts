/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProfileImport } from './routes/profile'
import { Route as RootRouteImport } from './routes/_root/route'
import { Route as RootIndexImport } from './routes/_root/index'

// Create/Update Routes

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const RootRouteRoute = RootRouteImport.update({
  id: '/_root',
  getParentRoute: () => rootRoute,
} as any)

const RootIndexRoute = RootIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => RootRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_root': {
      id: '/_root'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof RootRouteImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/_root/': {
      id: '/_root/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RootIndexImport
      parentRoute: typeof RootRouteImport
    }
  }
}

// Create and export the route tree

interface RootRouteRouteChildren {
  RootIndexRoute: typeof RootIndexRoute
}

const RootRouteRouteChildren: RootRouteRouteChildren = {
  RootIndexRoute: RootIndexRoute,
}

const RootRouteRouteWithChildren = RootRouteRoute._addFileChildren(
  RootRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof RootRouteRouteWithChildren
  '/profile': typeof ProfileRoute
  '/': typeof RootIndexRoute
}

export interface FileRoutesByTo {
  '/profile': typeof ProfileRoute
  '/': typeof RootIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_root': typeof RootRouteRouteWithChildren
  '/profile': typeof ProfileRoute
  '/_root/': typeof RootIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/profile' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/profile' | '/'
  id: '__root__' | '/_root' | '/profile' | '/_root/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RootRouteRoute: typeof RootRouteRouteWithChildren
  ProfileRoute: typeof ProfileRoute
}

const rootRouteChildren: RootRouteChildren = {
  RootRouteRoute: RootRouteRouteWithChildren,
  ProfileRoute: ProfileRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_root",
        "/profile"
      ]
    },
    "/_root": {
      "filePath": "_root/route.tsx",
      "children": [
        "/_root/"
      ]
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/_root/": {
      "filePath": "_root/index.tsx",
      "parent": "/_root"
    }
  }
}
ROUTE_MANIFEST_END */
